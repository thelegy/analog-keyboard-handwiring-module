from machine import ADC, Pin, SoftSPI


brightness = 31  # 1 to 31
saturation = 1  # 0.0 to 1.0

clock_pin = Pin(27, Pin.OUT)
mosi_pin = Pin(28, Pin.OUT)
miso_pin = Pin(12, Pin.IN)  # Using a dummy pin for MISO


adc = ADC(29)
spi = SoftSPI(baudrate=500000, polarity=0, phase=0, sck=clock_pin, mosi=mosi_pin, miso=miso_pin)


def send_color(red, green, blue, brightness=31):
  start_frame = b'\x00\x00\x00\x00'
  led_frame = bytes([0xE0 | brightness, blue, green, red])
  end_frame = b'\xFF\xFF\xFF\xFF'
  spi.write(start_frame + led_frame + end_frame)


def hsv_to_rgb(hue, saturation, brightness):
  hue = (hue * 360) % 360
  c = brightness * saturation  # Chroma
  x = c * (1 - abs((hue / 60) % 2 - 1))
  m = brightness - c

  if hue < 60:
    r, g, b = c, x, 0
  elif hue < 120:
    r, g, b = x, c, 0
  elif hue < 180:
    r, g, b = 0, c, x
  elif hue < 240:
    r, g, b = 0, x, c
  elif hue < 300:
    r, g, b = x, 0, c
  else:
    r, g, b = c, 0, x

  r, g, b = r + m, g + m, b + m
  return r, g, b


def main():
  alpha = 0.001
  avg = adc.read_u16()
  distance_avg = 0
  while True:
    value = adc.read_u16()
    avg = avg * (1-alpha) + value * alpha
    distance_avg = distance_avg * (1-alpha) + abs(value-avg) * alpha
    local_brightness = 1
    if distance_avg >= 200:
      local_brightness = brightness
    color = [int(x*255+0.5) for x in hsv_to_rgb(value / 50 / 360, saturation, 1)]
    print(distance_avg, avg, value-avg, value, *color)
    send_color(*color, local_brightness)


if __name__ == "__main__":
  main()
